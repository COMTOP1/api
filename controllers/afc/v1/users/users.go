package users

import (
	"fmt"
	"github.com/COMTOP1/api/controllers"
	"github.com/COMTOP1/api/services/afc/users"
	"github.com/COMTOP1/api/utils"
	"github.com/couchbase/gocb/v2"
	"github.com/labstack/echo/v4"
	"net/http"
	"strconv"
)

// Repo stores our dependencies
type Repo struct {
	users      *users.Store
	controller controllers.Controller
}

// NewRepo creates our data store
func NewRepo(scope *gocb.Scope, controller controllers.Controller) *Repo {
	return &Repo{
		users:      users.NewStore(scope),
		controller: controller,
	}
}

// GetUserByEmail finds a user by email
// @Summary Get a user by email
// @Description Get a basic user object by email.
// @ID get-user-email
// @Tags user-email
// @Produce json
// @Param email path string true "Email"
// @Success 200 {object} users.User
// @Router /ea231a602d352b2bcc5a2acca6022575/v1/internal/user/email/{email} [get]
func (r *Repo) GetUserByEmail(c echo.Context) error {
	email := c.Param("email")
	p, err := r.users.GetUserByEmail(email)
	if err != nil {
		err = fmt.Errorf("GetUserByEmail failed: %w", err)
		return echo.NewHTTPError(http.StatusInternalServerError, utils.Error{Error: err.Error()})
	}
	return c.JSON(http.StatusOK, p)
}

// GetUserById finds a user by id
// @Summary Get a user by id
// @Description Get a basic user object by id.
// @ID get-user-id
// @Tags user-id
// @Produce json
// @Param id path uint64 true "Id"
// @Success 200 {object} users.User
// @Router /ea231a602d352b2bcc5a2acca6022575/v1/internal/user/id/{id} [get]
func (r *Repo) GetUserById(c echo.Context) error {
	id, err := strconv.ParseUint(c.Param("id"), 10, 64)
	if err != nil {
		err = fmt.Errorf("GetUserById failed to get id: %w", err)
		return echo.NewHTTPError(http.StatusInternalServerError, utils.Error{Error: err.Error()})
	}
	p, err := r.users.GetUserById(id)
	if err != nil {
		err = fmt.Errorf("GetUserById failed: %w", err)
		return echo.NewHTTPError(http.StatusInternalServerError, utils.Error{Error: err.Error()})
	}
	return c.JSON(http.StatusOK, p)
}

// GetUserByEmailFull finds a user by email returning all info
// @Summary Get a full user by email
// @Description Get a complete user object by email.
// @ID get-user-email-full
// @Tags user-email-full
// @Produce json
// @Param email path string true "Email"
// @Success 200 {object} users.User
// @Router /ea231a602d352b2bcc5a2acca6022575/v1/internal/user/email/{email}/full [get]
func (r *Repo) GetUserByEmailFull(c echo.Context) error {
	email := c.Param("email")
	p, err := r.users.GetUserFullByEmail(email)
	if err != nil {
		err = fmt.Errorf("GetUserByEmailFull failed to get user: %w", err)
		return echo.NewHTTPError(http.StatusInternalServerError, utils.Error{Error: err.Error()})
	}
	return c.JSON(http.StatusOK, p)
}

// GetUserByIdFull finds a user by id returning all info
// @Summary Get a full user by id
// @Description Get a complete user object by id.
// @ID get-user-id-full
// @Tags user-id-full
// @Produce json
// @Param id path uint64 true "Id"
// @Success 200 {object} users.User
// @Router /ea231a602d352b2bcc5a2acca6022575/v1/internal/user/id/{id}/full [get]
func (r *Repo) GetUserByIdFull(c echo.Context) error {
	id, err := strconv.ParseUint(c.Param("id"), 10, 64)
	if err != nil {
		err = fmt.Errorf("GetUserById failed to get id: %w", err)
		return echo.NewHTTPError(http.StatusInternalServerError, utils.Error{Error: err.Error()})
	}
	p, err := r.users.GetUserFullById(id)
	if err != nil {
		err = fmt.Errorf("GetUserByEmailFull failed to get user: %w", err)
		return echo.NewHTTPError(http.StatusInternalServerError, utils.Error{Error: err.Error()})
	}
	return c.JSON(http.StatusOK, p)
}

// GetUserByToken finds a user by their JWT token
// @Summary Get a user by token
// @Description Get a basic user object by JWT token generated by web-auth.
// @ID get-user-token
// @Tags user-token
// @Produce json
// @Success 200 {object} users.User
// @Router /ea231a602d352b2bcc5a2acca6022575/v1/internal/user [get]
func (r *Repo) GetUserByToken(c echo.Context) error {
	claims, err := r.controller.Access.GetAFCToken(c.Request())
	if err != nil {
		err = fmt.Errorf("GetUserByToken failed to get token: %w", err)
		return echo.NewHTTPError(http.StatusBadRequest, utils.Error{Error: err.Error()})
	}
	p, err := r.users.GetUserById(claims.Id)
	if err != nil {
		err = fmt.Errorf("GetUserByToken failed getting user: %w", err)
		return echo.NewHTTPError(http.StatusInternalServerError, utils.Error{Error: err.Error()})
	}
	return c.JSON(http.StatusOK, p)
}

// GetUserByTokenFull finds a user by their JWT token returning all info
// @Summary Get a full user by token
// @Description Get a complete user object by JWT token generated by web-auth.
// @ID get-user-token-full
// @Tags user-token-full
// @Produce json
// @Success 200 {object} user.UserFull
// @Router /ea231a602d352b2bcc5a2acca6022575/v1/internal/user/full [get]
func (r *Repo) GetUserByTokenFull(c echo.Context) error {
	claims, err := r.controller.Access.GetAFCToken(c.Request())
	if err != nil {
		err = fmt.Errorf("GetUserByTokenFull failed to get token: %w", err)
		return echo.NewHTTPError(http.StatusInternalServerError, utils.Error{Error: err.Error()})
	}
	p, err := r.users.GetUserFullById(claims.Id)
	if err != nil {
		err = fmt.Errorf("GetUserByTokenFull failed getting user: %w", err)
		return echo.NewHTTPError(http.StatusInternalServerError, utils.Error{Error: err.Error()})
	}
	return c.JSON(http.StatusOK, p)
}

// ListAllUsers handles listing all users
//
// @Summary List all users
// @ID get-users-all
// @Tags users-all
// @Produce json
// @Success 200 {array} users.User
// @Router /ea231a602d352b2bcc5a2acca6022575/v1/internal/users [get]
func (r *Repo) ListAllUsers(c echo.Context) error {
	u, err := r.users.ListAllUsers()
	if err != nil {
		err = fmt.Errorf("ListAllUsers failed to get all users: %w", err)
		return echo.NewHTTPError(http.StatusInternalServerError, utils.Error{Error: err.Error()})
	}
	return c.JSON(http.StatusOK, u)
}

// ListContactUsers handles listing all contact users
//
// @Summary List all contact users
// @ID get-users-contact-all
// @Tags users-all-contact
// @Produce json
// @Success 200 {array} users.User
// @Router /ea231a602d352b2bcc5a2acca6022575/v1/public/contacts [get]
func (r *Repo) ListContactUsers(c echo.Context) error {
	u, err := r.users.ListContactUsers()
	if err != nil {
		err = fmt.Errorf("ListContactUsers failed to get contact users: %w", err)
		return echo.NewHTTPError(http.StatusInternalServerError, utils.Error{Error: err.Error()})
	}
	return c.JSON(http.StatusOK, u)
}

func (r *Repo) ListTeamManagersUsers(c echo.Context) error {
	teamId, err := strconv.ParseUint(c.Param("teamId"), 10, 64)
	if err != nil {
		err = fmt.Errorf("ListTeamManagersUsers failed to get teamId: %w", err)
		return c.JSON(http.StatusBadRequest, utils.Error{Error: err.Error()})
	}
	u, err := r.users.ListTeamManagersUsers(teamId)
	if err != nil {
		err = fmt.Errorf("ListTeamManagersUsers failed to get team managers users: %w", err)
		return echo.NewHTTPError(http.StatusInternalServerError, utils.Error{Error: err.Error()})
	}
	return c.JSON(http.StatusOK, u)
}

func (r *Repo) AddUser(c echo.Context) error {
	var u *users.UserFull
	err := c.Bind(&u)
	if err != nil {
		err = fmt.Errorf("AddUser failed to get user: %w", err)
		return c.JSON(http.StatusInternalServerError, utils.Error{Error: err.Error()})
	}
	err = r.users.AddUser(u)
	if err != nil {
		return echo.NewHTTPError(http.StatusInternalServerError, utils.Error{Error: err.Error()})
	}
	return c.JSON(http.StatusOK, u)
}

func (r *Repo) EditUser(c echo.Context) error {
	var u *users.UserFull
	err := c.Bind(&u)
	if err != nil {
		err = fmt.Errorf("EditUser failed to get user: %w", err)
		return c.JSON(http.StatusInternalServerError, utils.Error{Error: err.Error()})
	}
	err = r.users.EditUser(u)
	if err != nil {
		return echo.NewHTTPError(http.StatusInternalServerError, utils.Error{Error: err.Error()})
	}
	return c.JSON(http.StatusOK, u)
}

func (r *Repo) DeleteUserFromEmail(c echo.Context) error {
	email := c.Param("email")
	_, err := r.users.GetUserFullByEmail(email)
	if err != nil {
		err = fmt.Errorf("DeleteUser failed to get user: %w", err)
		return echo.NewHTTPError(http.StatusInternalServerError, utils.Error{Error: err.Error()})
	}
	err = r.users.DeleteUserFromEmail(email)
	if err != nil {
		err = fmt.Errorf("DeleteUser failed to delete user: %w", err)
		return echo.NewHTTPError(http.StatusInternalServerError, utils.Error{Error: err.Error()})
	}
	return c.NoContent(http.StatusNoContent)
}

func (r *Repo) DeleteUserFromId(c echo.Context) error {
	id, err := strconv.ParseUint(c.Param("id"), 10, 64)
	if err != nil {
		return fmt.Errorf("DeleteUserFromId error: %w", err)
	}
	_, err = r.users.GetUserFullById(id)
	if err != nil {
		err = fmt.Errorf("DeleteUser failed to get user: %w", err)
		return echo.NewHTTPError(http.StatusInternalServerError, utils.Error{Error: err.Error()})
	}
	err = r.users.DeleteUserFromId(id)
	if err != nil {
		err = fmt.Errorf("DeleteUser failed to delete user: %w", err)
		return echo.NewHTTPError(http.StatusInternalServerError, utils.Error{Error: err.Error()})
	}
	return c.NoContent(http.StatusNoContent)
}
